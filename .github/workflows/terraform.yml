# name: terraform deployment

# on:
#   push:
#     branches:
#       - master

# jobs:
#   deploy_dev:
#     name: "Terraform Deployment"
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Azure Login
#         uses: azure/login@v1
#         with:
#           creds: ${{ secrets.AZURE_CREDENTIALS }}  


#       # - name: Setup Terraform
#       #   uses: hashicorp/terraform-github-actions@master
#       #   with:
#       #       tf_actions_version: 1.2.0
#       #       tf_actions_subcommand: "fmt"
#       #       tf_actions_working_dir: "./environment/dev"
#       #       tf_actions_comment: true
#       #   env:
#       #     github_token: ${{ secrets.TERRAFORM_TOKEN }}
           
#       # - name: Terraform init dev
#       #   uses: hashicorp/terraform-github-actions@master
#       #   with:
#       #     tf_actions_version: 1.2.0
#       #     tf_actions_subcommand: "init"
#       #     tf_actions_working_dir: "./environment/dev"
#       #     tf_actions_comment: true
#       #   env:
#       #     # github_token: ${{ secrets.TERRAFORM_TOKEN }}
#       #     TF_VAR_agent_client_id: ${{ secrets.ARM_CLIENT_ID }}
#       #     TF_VAR_agent_client_secret: ${{ secrets.ARM_CLIENT_SECRET }}
#       #     TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
#       #     TF_VAR_tenant_id: ${{ secrets.ARM_TENANT_ID }}
          

#       # - name: Terraform plan dev
#       #   uses: hashicorp/terraform-github-actions@master
#       #   with:
#       #     tf_actions_version: 1.2.0
#       #     tf_actions_subcommand: "plan"
#       #     tf_actions_working_dir: "./environment/dev"
#       #     tf_actions_comment: true
#       #   env:
#       #     # github_token: ${{ secrets.TERRAFORM_TOKEN }}
#       #     TF_VAR_agent_client_id: ${{ secrets.ARM_CLIENT_ID }}
#       #     TF_VAR_agent_client_secret: ${{ secrets.ARM_CLIENT_SECRET }}
#       #     TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
#       #     TF_VAR_tenant_id: ${{ secrets.ARM_TENANT_ID }}
          
          
        

#       # - name: Terraform apply dev
#       #   uses: hashicorp/terraform-github-actions@master
#       #   with:
#       #     tf_actions_version: 1.2.0
#       #     tf_actions_subcommand: "apply"
#       #     tf_actions_working_dir: "./environment/dev"
#       #     tf_actions_comment: true
#       #   env:
#       #     # github_token: ${{ secrets.TERRAFORM_TOKEN }}
#       #     TF_VAR_agent_client_id: ${{ secrets.ARM_CLIENT_ID }}
#       #     TF_VAR_agent_client_secret: ${{ secrets.ARM_CLIENT_SECRET }}
#       #     TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
#       #     TF_VAR_tenant_id: ${{ secrets.ARM_TENANT_ID }}
#       - name: Terraform Init && Terraform Validate
#         id: init
#         env:
#           agent_client_id: ${{ secrets.ARM_CLIENT_ID }}
#           agent_client_secret: ${{ secrets.ARM_CLIENT_SECRET }}
#           subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
#           tenant_id: ${{ secrets.ARM_TENANT_ID }}
#         run: |
#           cd ./environment/dev
#           terraform init
#           terraform plan

# name: Terraform Azure Deployment

# on:
#   push:
#     branches:
#       - master
#   pull_request:
#     branches:
#       - master

# jobs:
#   terraform_deploy:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v2

#     - name: Set up Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         terraform_version: 1.7.0

#     - name: Login to Azure
#       uses: azure/login@v1
#       with:
#         creds: ${{ secrets.AZURE_CREDENTIALS }}

#     - name: Initialize Terraform
#       working-directory: ./environment/dev
#       run: terraform init

#     - name: Terraform Plan
#       working-directory: ./environment/dev
#       run: terraform plan

#     - name: Terraform Apply
#       working-directory: ./environment/dev
#       run: terraform apply -auto-approve
# name: Terraform Azure Deployment

# on:
#   push:
#     branches:
#       - master
#   pull_request:
#     branches:
#       - master

# jobs:
#   terraform_deploy:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v2

#     - name: Set up Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         terraform_version: 1.0.0

#     - name: Log in to Azure with Service Principal
#       uses: azure/CLI@v1
#       with:
#         azcliversion: 2.32.0
#       env:
#         ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
#         ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
#         ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
#         ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

#     - name: Initialize Terraform
#       working-directory: ./environment/dev
#       run: terraform init

#     - name: Terraform Plan
#       working-directory: ./environment/dev
#       run: terraform plan

#     - name: Terraform Apply
#       working-directory: ./environment/dev
#       run: terraform apply -auto-approve
# name: Terraform Azure Deployment

# on:
#   push:
#     branches:
#       - master
#   pull_request:
#     branches:
#       - master

# jobs:
#   terraform_deploy:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v2

#     - name: Set up Terraform
#       uses: hashicorp/setup-terraform@v3
#       with:
#         terraform_version: 1.7.0

#     - name: Log in to Azure with Service Principal
#       uses: azure/CLI@v1
#       with:
#         azcliversion: 2.32.0
#       env:
#         ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
#         ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
#         ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
#         ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

#     - name: Initialize Terraform
#       working-directory: ./environment/dev
#       run: |
#         terraform init

#     - name: Terraform Plan
#       working-directory: ./environment/dev
#       run: |
#         terraform plan -out=tfplan

#     - name: Terraform Apply
#       working-directory: ./environment/dev
#       run: |
#         terraform apply -auto-approve tfplan
# name: Terraform Azure Deployment

# on:
#   push:
#     branches:
#       - master
#   pull_request:
#     branches:
#       - master

# jobs:
#   terraform_deploy:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v2

#     - name: Set up Terraform
#       uses: hashicorp/setup-terraform@v3
#       with:
#         terraform_version: 1.7.0

#     # - name: Install Azure CLI
#     #   run: |
#     #     sudo apt-get update
#     #     sudo apt-get install -y curl
#     #     curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

#     - name: Log in to Azure with Service Principal
#       run: |
#         az login --service-principal -u ${{ secrets.ARM_CLIENT_ID }} -p ${{ secrets.ARM_CLIENT_SECRET }} --tenant ${{ secrets.ARM_TENANT_ID }}

#     - name: Initialize Terraform
#       working-directory: ./environment/dev
#       run: |
#         terraform init

#     - name: Terraform Plan
#       working-directory: ./environment/dev
#       run: |
#         terraform plan -out=tfplan

#     - name: Terraform Apply
#       working-directory: ./environment/dev
#       run: |
#         terraform apply -auto-approve tfplan

name: Terraform Azure Deployment

on:
  push:
    branches:
      - master
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless of the GitHub Actions runner OS
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # - name: Install Azure CLI
    #   uses: azure/CLI@v1
    #   with:
    #     azcliversion: 2.32.0  # Specify the desired Azure CLI version

    - name: Log in to Azure
      run: |
        az login --service-principal -u ${{ secrets.ARM_CLIENT_ID }} -p ${{ secrets.ARM_CLIENT_SECRET }} --tenant ${{ secrets.ARM_TENANT_ID }}
        az account set --subscription ${{ secrets.ARM_SUBSCRIPTION_ID }}

    # - name: Create Azure Storage Account
    #   run: |
    #     az storage account create --name "yourstorageaccountname" --resource-group "yourresourcegroup" --location "yourlocation" --sku Standard_LRS

    - name: Get Storage Account Key
      id: get_storage_key
      run: |
        key=$(az storage account keys list --resource-group "terraform-storage" --account-name "terraformstatetestsam" --query "[0].value" --output tsv)
        echo "::set-output name=storage_key::$key"

    # - name: Create Azure Blob Storage Container
    #   run: |
    #     az storage container create --name "yourcontainername" --account-name "yourstorageaccountname" --account-key "${{ steps.get_storage_key.outputs.storage_key }}"

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.7.0

    - name: Terraform Init
      working-directory: ./environment/dev
      run: |
        terraform init -backend-config="storage_account_name=terraformstatetestsam" -backend-config="container_name=statefile" -backend-config="access_key=${{ steps.get_storage_key.outputs.storage_key }}" -reconfigure

    # - name: Terraform Format Check
    #   working-directory: ./environment/dev
    #   run: |
    #     terraform fmt -check

    - name: Terraform Plan
      working-directory: ./environment/dev
      run: |
        terraform plan -out=tfplan -input=false

    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      working-directory: ./environment/dev
      run: |
        terraform apply -auto-approve tfplan -input=false





        
      
      
           
           
         
        
          

